package com.gratus.usagepeek

import android.Manifest
import android.app.Activity
import android.content.ContentValues
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.os.SystemClock
import android.provider.MediaStore
import android.provider.Settings
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Close
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.compose.LocalLifecycleOwner
import com.gratus.usagepeek.ui.theme.UsagePeekTheme   // <- generated by the template
import com.gratus.usagepeek.AppPrefs
import kotlinx.coroutines.launch
import androidx.core.net.toUri
import androidx.compose.material3.HorizontalDivider
import androidx.core.graphics.drawable.toBitmap
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.graphics.painter.BitmapPainter
import androidx.compose.foundation.*
import androidx.compose.foundation.lazy.*
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.text.font.FontWeight
import androidx.core.app.ActivityCompat
import androidx.core.content.FileProvider
import java.io.File
import java.text.SimpleDateFormat
import java.util.Locale
import androidx.compose.animation.animateContentSize
import androidx.compose.ui.res.painterResource
import org.json.JSONObject
import androidx.core.content.edit
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsControllerCompat

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        if (Build.VERSION.SDK_INT >= 33 &&
            checkSelfPermission(Manifest.permission.POST_NOTIFICATIONS) !=
            PackageManager.PERMISSION_GRANTED) {
            requestPermissions(arrayOf(Manifest.permission.POST_NOTIFICATIONS), 0)
        }

        // Make the status bar transparent
        window.statusBarColor = android.graphics.Color.TRANSPARENT

        // Ensure the content draws behind the status bar
        WindowCompat.setDecorFitsSystemWindows(window, false)

        val controller = WindowInsetsControllerCompat(window, window.decorView)

        // Set the status bar icons to light or dark based on the background
        controller.isAppearanceLightStatusBars = isBackgroundLight()

        setContent {
            UsagePeekTheme {
                Surface(Modifier.fillMaxSize()) {
                    SettingsScreen()
                }
            }
        }
    }
}

private fun isBackgroundLight(): Boolean {
    // Return true if your app theme background is light. Adjust as needed.
    // For example, if you're using dynamic theming or Material3, inspect the actual background color
    return true  // or false based on your actual theme background
}

@Composable
fun SettingsScreen() {

    /* ---------- helpers ---------- */
    val scope = rememberCoroutineScope()
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("prefs", Context.MODE_PRIVATE)

    var overlayGranted by remember { mutableStateOf(Settings.canDrawOverlays(context)) }
    var usageGranted  by remember { mutableStateOf(PermissionUtils.hasUsageAccess(context)) }
    var overlayRunning by remember { mutableStateOf(false) }
    var panelExpanded by remember { mutableStateOf(true) }      // NEW

    val lifecycleOwner = LocalLifecycleOwner.current

    DisposableEffect(lifecycleOwner) {               // NEW
        val obs = LifecycleEventObserver { _, ev ->
            if (ev == Lifecycle.Event.ON_RESUME) {
                overlayGranted = Settings.canDrawOverlays(context)
                usageGranted   = PermissionUtils.hasUsageAccess(context)
            }
        }
        lifecycleOwner.lifecycle.addObserver(obs)
        onDispose { lifecycleOwner.lifecycle.removeObserver(obs) }
    }

    /* ---------- UI ---------- */
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(12.dp),
        verticalArrangement = Arrangement.spacedBy(2.dp)
    ) {

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                "UsagePeek",
                style = MaterialTheme.typography.headlineMedium,
                modifier = Modifier.weight(1f)          // pushes icon to the right
            )

            IconButton(
                onClick = {
                    val url = "https://github.com/spewedprojects/UsagePeek"
                    context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url)))
                }
            ) {
                Icon(
                    painterResource(R.drawable.github_mark),
                    contentDescription = "GitHub",
                    Modifier
                        .size(45.dp)
                        .padding(2.dp)
                )
            }
        }

        // show each card only if permission still missing
        if (!overlayGranted) {
            PermissionCard(
                title = "Display over other apps",
                granted = false
            ) {
                context.startActivity(
                    Intent(
                        Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                        "package:${context.packageName}".toUri()
                    )
                )
            }
        }

        if (!usageGranted) {
            PermissionCard(
                title = "App usage access",
                granted = false
            ) {
                context.startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))
            }
        }

        Spacer(Modifier.height(1.dp))

        // ---- put below Spacer(24.dp) in SettingsScreen() ----

        /* App list functionality starts */
        val pm = context.packageManager
        val allLaunchables = remember {
            val launcherIntent = Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_LAUNCHER)
            val infos = if (Build.VERSION.SDK_INT >= 33) {
                pm.queryIntentActivities(
                    launcherIntent,
                    PackageManager.ResolveInfoFlags.of(PackageManager.MATCH_ALL.toLong())
                )
            } else {
                @Suppress("DEPRECATION")
                pm.queryIntentActivities(launcherIntent, PackageManager.MATCH_ALL)
            }
            infos
                .map { it.activityInfo.applicationInfo }
                .sortedBy { pm.getApplicationLabel(it).toString().lowercase() }
        }
        val enabledPkgs by AppPrefs.enabledPackages(context).collectAsState(initial = emptySet())

        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f),                 // take remaining height
            contentPadding = PaddingValues(vertical = 8.dp)
        ) {
            items(allLaunchables) { appInfo ->
                val pkg  = appInfo.packageName
                val name = pm.getApplicationLabel(appInfo).toString()
                val icon = pm.getApplicationIcon(pkg)

                Row(
                    Modifier
                        .fillMaxWidth()
                        .clickable {
                            // toggle on row tap
                            scope.launch {
                                AppPrefs.setEnabled(context, pkg, pkg !in enabledPkgs)
                            }
                        }
                        .padding(horizontal = 16.dp, vertical = 8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Image(
                        painter = remember { BitmapPainter(icon.toBitmap().asImageBitmap()) },
                        contentDescription = null,
                        modifier = Modifier.size(32.dp)
                    )
                    Spacer(Modifier.width(16.dp))
                    Text(name, Modifier.weight(1f))
                    Switch(
                        checked = pkg in enabledPkgs,
                        onCheckedChange = {
                            scope.launch { AppPrefs.setEnabled(context, pkg, it) }
                        }
                    )
                }
                HorizontalDivider()
            }
        }
        /* App list functionality ends */
        // Bottom buttons row starts
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp, bottom = 16.dp, top = 0.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalAlignment = Alignment.CenterVertically,
        ) {
                Button(
                    enabled = overlayGranted && !overlayRunning,
                    onClick = {
                        context.startForegroundService(
                            Intent(context, OverlayService::class.java)
                        )
                        overlayRunning = true
                        prefs.edit { putBoolean("overlay_active", true) }
                    }
                ) { Text("Start timer") }

                Button(
                    enabled = overlayRunning,
                    onClick = {
                        context.stopService(Intent(context, OverlayService::class.java))
                        overlayRunning = false
                        prefs.edit { putBoolean("overlay_active", false) }
                    }
                ) { Text("Stop") }

            Spacer(Modifier.weight(1f))                        // pushes Export to the right edge

            /* export button */
            OutlinedButton(
                onClick = { exportDatabase(context) }
            ) { Text("Save DB") }
        }
        // Buttons row ends
    }
}

@Composable
private fun PermissionCard(
    title: String,
    granted: Boolean,
    onClick: () -> Unit
) {
    ElevatedCard(
        modifier = Modifier
            .fillMaxWidth()
            .padding(4.dp),
        onClick = onClick
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(title)
            Icon(
                imageVector = if (granted) Icons.Default.Check else Icons.Default.Close,
                contentDescription = null
            )
        }
    }
}

private fun exportDatabase(ctx: Context) {
    val src = ctx.getDatabasePath("usagepeek.db")
    if (!src.exists()) {
        Toast.makeText(ctx, "Database not found", Toast.LENGTH_SHORT).show()
        return
    }

    val stamp = SimpleDateFormat("yyyy-MM-dd_HH-mm-ss", Locale.getDefault())
        .format(System.currentTimeMillis())
    val fileName = "usagepeek_$stamp.db"

    if (Build.VERSION.SDK_INT >= 29) {
        /* ---------- Android 10+ : MediaStore ---------- */
        val values = ContentValues().apply {
            put(MediaStore.Files.FileColumns.DISPLAY_NAME, fileName)
            put(MediaStore.Files.FileColumns.MIME_TYPE, "application/octet-stream")
            put(MediaStore.Files.FileColumns.RELATIVE_PATH, Environment.DIRECTORY_DOCUMENTS + "/UsagePeekExports")
            put(MediaStore.Files.FileColumns.IS_PENDING, 1)
        }

        val uri = ctx.contentResolver.insert(
            MediaStore.Files.getContentUri("external"), values
        ) ?: run {
            Toast.makeText(ctx, "Failed to create file", Toast.LENGTH_SHORT).show()
            return
        }

        ctx.contentResolver.openOutputStream(uri)?.use { out ->
            src.inputStream().use { it.copyTo(out) }
        }

        values.clear()
        values.put(MediaStore.Files.FileColumns.IS_PENDING, 0)
        ctx.contentResolver.update(uri, values, null, null)

        Toast.makeText(ctx, "Saved to Documents/UsagePeekExports", Toast.LENGTH_LONG).show()

    } else {
        /* ---------- Android 9 and below ---------- */
        if (ctx.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                (ctx as Activity),                    // call from activity context
                arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),
                101
            )
            return
        }

        val destDir = File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
            "UsagePeekExports"
        ).apply { mkdirs() }

        val dest = File(destDir, fileName)
        src.inputStream().use { it.copyTo(dest.outputStream()) }

        Toast.makeText(ctx, "Saved to ${dest.relativeTo(Environment.getExternalStorageDirectory())}",
            Toast.LENGTH_LONG).show()
    }
}



